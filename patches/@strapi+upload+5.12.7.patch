diff --git a/node_modules/@strapi/upload/dist/server/register.js b/node_modules/@strapi/upload/dist/server/register.js
index e7deaed..9c7756a 100644
--- a/node_modules/@strapi/upload/dist/server/register.js
+++ b/node_modules/@strapi/upload/dist/server/register.js
@@ -34,23 +34,34 @@ const createProvider = (config)=>{
     const providerName = _.toLower(config.provider);
     let provider;
     let modulePath;
-    try {
-        modulePath = require.resolve(`@strapi/provider-upload-${providerName}`);
-    } catch (error) {
-        if (typeof error === 'object' && error !== null && 'code' in error && error.code === 'MODULE_NOT_FOUND') {
-            modulePath = providerName;
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('@strapi', true, /^\.\/provider-upload-.*\.(js|json)$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "@strapi"', req.id, req.keys());
+        if (req.keys().includes(`./provider-upload-${providerName}/package.json`)){
+            const packageJson = req(`./provider-upload-${providerName}/package.json`);
+            provider = req(`./provider-upload-${providerName}/${packageJson.main.substring(2)}`);
         } else {
-            throw error;
+            throw new Error(`Could not load upload provider "${providerName}" in webpack context. export DEBUG_PRINT_WEBPACK_CONTEXT=1 for debuging`);
         }
-    }
-    try {
-        provider = require(modulePath);
-    } catch (err) {
-        const newError = new Error(`Could not load upload provider "${providerName}".`);
-        if (err instanceof Error) {
-            newError.stack = err.stack;
+    } else {
+        try {
+            modulePath = require.resolve(`@strapi/provider-upload-${providerName}`);
+        } catch (error) {
+            if (typeof error === 'object' && error !== null && 'code' in error && error.code === 'MODULE_NOT_FOUND') {
+                modulePath = providerName;
+            } else {
+                throw error;
+            }
+        }
+        try {
+            provider = require(modulePath);
+        } catch (err) {
+            const newError = new Error(`Could not load upload provider "${providerName}".`);
+            if (err instanceof Error) {
+                newError.stack = err.stack;
+            }
+            throw newError;
         }
-        throw newError;
     }
     const providerInstance = provider.init(providerOptions);
     if (!providerInstance.delete) {
@@ -65,7 +76,9 @@ const createProvider = (config)=>{
     const wrappedProvider = _.mapValues(providerInstance, (method, methodName)=>{
         return async (file, options = actionOptions[methodName])=>providerInstance[methodName](file, options);
     });
-    return Object.assign(Object.create(baseProvider), wrappedProvider);
+    const initialized = Object.assign(Object.create(baseProvider), wrappedProvider);
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log(`DEBUG: modules: upload/createProvider "${providerName}"`, initialized);
+    return initialized;
 };
 const baseProvider = {
     extend (obj) {
