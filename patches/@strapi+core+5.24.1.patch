diff --git a/node_modules/@strapi/core/dist/configuration/config-loader.js b/node_modules/@strapi/core/dist/configuration/config-loader.js
index d386250..27209ba 100644
--- a/node_modules/@strapi/core/dist/configuration/config-loader.js
+++ b/node_modules/@strapi/core/dist/configuration/config-loader.js
@@ -55,6 +55,20 @@ const logWarning = (message)=>{
     console.warn(message);
 };
 var loadConfigDir = ((dir)=>{
+    if (typeof __webpack_require__ === 'function') {
+        if (!dir.endsWith('config')) return {};
+        const req = require.context('config', false, /^\.\/.*\.js$/);
+        const configFiles = req.keys();
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "config"', req.id, configFiles);
+        return configFiles.reduce(
+            (acc, file) => {
+                const key = path.basename(file, path.extname(file));
+                acc[key] = loadConfigFile.loadConfigFile(file, req);
+                return acc;
+            },
+            {}
+        );
+    }
     if (!fs.existsSync(dir)) return {};
     const allFiles = fs.readdirSync(dir, {
         withFileTypes: true
diff --git a/node_modules/@strapi/core/dist/configuration/index.js b/node_modules/@strapi/core/dist/configuration/index.js
index d55184f..c8ecee8 100644
--- a/node_modules/@strapi/core/dist/configuration/index.js
+++ b/node_modules/@strapi/core/dist/configuration/index.js
@@ -14,7 +14,13 @@ var _package = require('../package.json.js');
 dotenv.config({
     path: process.env.ENV_PATH
 });
-process.env.NODE_ENV = process.env.NODE_ENV || 'development';
+if (typeof __webpack_require__ === 'function') {
+    if (!process.env.NODE_ENV) { 
+        throw Error("please define NODE_ENV env variable, e.g export NODE_ENV=development");
+    }
+} else {
+    process.env.NODE_ENV = process.env.NODE_ENV || 'development';
+}
 const defaultConfig = {
     server: {
         host: process.env.HOST || os.hostname() || 'localhost',
@@ -52,7 +58,14 @@ const defaultConfig = {
 };
 const loadConfiguration = (opts)=>{
     const { appDir, distDir, autoReload = false, serveAdminPanel = true } = opts;
-    const pkgJSON = require(path.resolve(appDir, 'package.json'));
+    let pkgJSON;
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('appDir', false, /^\.\/package\.json$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "appDir"', req.id, req.keys());
+        pkgJSON = req('./package.json');
+    } else {
+        pkgJSON = require(path.resolve(appDir, 'package.json'));
+    }
     const configDir = path.resolve(distDir || process.cwd(), 'config');
     const rootConfig = {
         launchedAt: Date.now(),
@@ -69,10 +82,13 @@ const loadConfiguration = (opts)=>{
             serveAdminPanel
         }
     };
+    process.env.DEBUG_PRINT_CONFIG && console.log('DEBUG: config, rootConfig', rootConfig);
     // See packages/core/core/src/domain/module/index.ts for plugin config loading
     const baseConfig = fp.omit('plugins', configLoader(configDir)); // plugin config will be loaded later
+    process.env.DEBUG_PRINT_CONFIG && console.log('DEBUG: config, baseConfig', baseConfig);
     const envDir = path.resolve(configDir, 'env', process.env.NODE_ENV);
     const envConfig = configLoader(envDir);
+    process.env.DEBUG_PRINT_CONFIG && console.log('DEBUG: config, envConfig', envConfig);
     const config = _.merge(rootConfig, defaultConfig, baseConfig, envConfig);
     const { serverUrl, adminUrl } = urls.getConfigUrls(config);
     const serverAbsoluteUrl = urls.getAbsoluteServerUrl(config);
@@ -85,6 +101,7 @@ const loadConfiguration = (opts)=>{
     _.set(config, 'admin.path', adminPath);
     _.set(config, 'admin.absoluteUrl', adminAbsoluteUrl);
     _.set(config, 'dirs', getDirs.getDirs(opts, config));
+    process.env.DEBUG_PRINT_CONFIG && console.log('DEBUG: config, merged config', config);
     return config;
 };
 
diff --git a/node_modules/@strapi/core/dist/ee/license.js b/node_modules/@strapi/core/dist/ee/license.js
index 3068914..6e5eb44 100644
--- a/node_modules/@strapi/core/dist/ee/license.js
+++ b/node_modules/@strapi/core/dist/ee/license.js
@@ -38,7 +38,14 @@ const DEFAULT_FEATURES = {
     ]
 };
 const LICENSE_REGISTRY_URI = 'https://license.strapi.io';
-const publicKey = fs.readFileSync(path.resolve(__dirname, '../../resources/key.pub'));
+let publicKey;
+if (typeof __webpack_require__ === 'function') {
+    const req = require.context('../../resources', false, /.*\.pub$/);
+    process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "../../resources" in @strapi/core', req.id, req.keys());
+    publicKey = req('./key.pub');
+} else {
+    publicKey = fs.readFileSync(path.resolve(__dirname, '../../resources/key.pub'));
+}
 class LicenseCheckError extends Error {
     constructor(message, shouldFallback = false){
         super(message);
diff --git a/node_modules/@strapi/core/dist/loaders/apis.js b/node_modules/@strapi/core/dist/loaders/apis.js
index b8fd4d5..5b4a183 100644
--- a/node_modules/@strapi/core/dist/loaders/apis.js
+++ b/node_modules/@strapi/core/dist/loaders/apis.js
@@ -17,24 +17,61 @@ const normalizeName = (name)=>strapiUtils.strings.isKebabCase(name) ? name : _.k
 const isDirectory = (fd)=>fd.isDirectory();
 const isDotFile = (fd)=>fd.name.startsWith('.');
 async function loadAPIs(strapi) {
-    if (!fse.existsSync(strapi.dirs.dist.api)) {
-        return;
-    }
-    const apisFDs = await (await fse.readdir(strapi.dirs.dist.api, {
-        withFileTypes: true
-    })).filter(isDirectory).filter(_.negate(isDotFile));
     const apis = {};
-    // only load folders
-    for (const apiFD of apisFDs){
-        const apiName = normalizeName(apiFD.name);
-        const api = await loadAPI(apiName, path.join(strapi.dirs.dist.api, apiFD.name));
-        // @ts-expect-error TODO verify that it's a valid api, not missing bootstrap, register, and destroy
-        apis[apiName] = api;
+    if (typeof __webpack_require__ === "function") {
+        const req = require.context("api", true, /\.(js|json)$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log("DEBUG: webpack context 'api'", req.id, req.keys());
+        //extract all folders (in all depths) from all files
+        const allFolderSet = new Set();
+        for (const path of req.keys()) {
+            //remove "./" and filename
+            const parts = path.split("/").slice(1, -1);
+            //create entry for each level / sub dir
+            for (let i = 1; i <= parts.length; i++) {
+                allFolderSet.add(parts.slice(0, i).join("/"));
+            }
+        };
+        const allFolders = [...allFolderSet].sort();
+        const allFiles = req.keys().map((path) => path.substring(2));
+
+        req.pathExists = (path) => allFolders.includes(path);
+        function extractBySegments (data, path) {
+            const requiredSegments = path.split("/").length + 1
+            return data
+                .filter((entry) => entry.startsWith(`${path}/`) && entry.split("/").length === requiredSegments)
+                .map((entry) => entry.split("/")[requiredSegments-1]);
+        }
+        req.listDirs = (path) => extractBySegments(allFolders, path);
+        req.listFiles = (path) => extractBySegments(allFiles, path);
+        req.fileExist = (path) => req.keys().includes(`./${path}`);
+    
+        //extract main folders / apis
+        const mainNames = allFolders.filter(path => path.split("/").length === 1);
+        for (const name of mainNames) {
+            const apiName = normalizeName(name);
+            const api = await loadAPI(apiName, name, req);
+            apis[apiName] = api;
+        }
+    } else {
+        if (!fse.existsSync(strapi.dirs.dist.api)) {
+            return;
+        }
+        const apisFDs = await (await fse.readdir(strapi.dirs.dist.api, {
+            withFileTypes: true
+        })).filter(isDirectory).filter(_.negate(isDotFile));
+        // only load folders
+        for (const apiFD of apisFDs){
+            const apiName = normalizeName(apiFD.name);
+            const api = await loadAPI(apiName, path.join(strapi.dirs.dist.api, apiFD.name), null);
+            // @ts-expect-error TODO verify that it's a valid api, not missing bootstrap, register, and destroy
+            apis[apiName] = api;
+        }
     }
     validateContentTypesUnicity(apis);
     for (const apiName of Object.keys(apis)){
         strapi.get('apis').add(apiName, apis[apiName]);
     }
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: loadAPIs', apis);
 }
 const validateContentTypesUnicity = (apis)=>{
     const allApisSchemas = Object.values(apis).flatMap((api)=>Object.values(api.contentTypes));
@@ -56,16 +93,16 @@ const validateContentTypesUnicity = (apis)=>{
         }
     });
 };
-const loadAPI = async (apiName, dir)=>{
+const loadAPI = async (apiName, dir, req)=>{
     const [index, config, routes, controllers, services, policies, middlewares, contentTypes] = (await Promise.all([
-        loadIndex(dir),
-        loadDir(path.join(dir, 'config')),
-        loadDir(path.join(dir, 'routes')),
-        loadDir(path.join(dir, 'controllers')),
-        loadDir(path.join(dir, 'services')),
-        loadDir(path.join(dir, 'policies')),
-        loadDir(path.join(dir, 'middlewares')),
-        loadContentTypes(apiName, path.join(dir, 'content-types'))
+        loadIndex(dir, req),
+        loadDir(path.join(dir, 'config'), req),
+        loadDir(path.join(dir, 'routes'), req),
+        loadDir(path.join(dir, 'controllers'), req),
+        loadDir(path.join(dir, 'services'), req),
+        loadDir(path.join(dir, 'policies'), req),
+        loadDir(path.join(dir, 'middlewares'), req),
+        loadContentTypes(apiName, path.join(dir, 'content-types'), req)
     ])).map((result)=>result?.result);
     return {
         ...index || {},
@@ -78,27 +115,41 @@ const loadAPI = async (apiName, dir)=>{
         contentTypes: contentTypes || {}
     };
 };
-const loadIndex = async (dir)=>{
-    if (await fse.pathExists(path.join(dir, 'index.js'))) {
-        return loadFile(path.join(dir, 'index.js'));
+
+const loadIndex = async (dir, req)=>{
+    const indexPath = path.join(dir, 'index.js');
+    if (req?.fileExist(indexPath) || await fse.pathExists(indexPath)) {
+        return loadFile(indexPath, req);
     }
 };
 // because this is async and its contents are dynamic, we must return it within an object to avoid a property called `then` being interpreted as a Promise
-const loadContentTypes = async (apiName, dir)=>{
-    if (!await fse.pathExists(dir)) {
-        return;
+const loadContentTypes = async (apiName, dir, req)=>{
+    let contentTypeFolders;
+    if (req){
+        if (!req.pathExists(dir)){
+            return;
+        }
+        contentTypeFolders = req.listDirs(dir);
+    } else {
+        if (!await fse.pathExists(dir)) {
+            return;
+        }
+        contentTypeFolders = [];
+        const fds = await fse.readdir(dir, {
+            withFileTypes: true
+        });
+        // only load folders
+        for (const fd of fds){
+            if (fd.isFile()) {
+                continue;
+            }
+            contentTypeFolders.push(fd.name);
+        }
     }
-    const fds = await fse.readdir(dir, {
-        withFileTypes: true
-    });
     const contentTypes = {};
-    // only load folders
-    for (const fd of fds){
-        if (fd.isFile()) {
-            continue;
-        }
-        const contentTypeName = normalizeName(fd.name);
-        const loadedContentType = (await loadDir(path.join(dir, fd.name)))?.result;
+    for (const name of contentTypeFolders) {
+        const contentTypeName = normalizeName(name);
+        const loadedContentType = (await loadDir(path.join(dir, name), req))?.result;
         if (fp.isEmpty(loadedContentType) || fp.isEmpty(loadedContentType.schema)) {
             throw new Error(`Could not load content type found at ${dir}`);
         }
@@ -118,34 +169,52 @@ const loadContentTypes = async (apiName, dir)=>{
     };
 };
 // because this is async and its contents are dynamic, we must return it within an object to avoid a property called `then` being interpreted as a Promise
-const loadDir = async (dir)=>{
-    if (!await fse.pathExists(dir)) {
+const loadDir = async (dir, req)=>{
+    let files;
+    if (req){
+      if (!req.pathExists(dir)){
         return;
+      }
+      files = req.listFiles(dir);
+    } else { 
+        if (!await fse.pathExists(dir)) {
+            return;
+        }
+        files = [];
+        const fds = await fse.readdir(dir, {
+            withFileTypes: true
+        });
+        for (const fd of fds){
+            if (!fd.isFile() || path.extname(fd.name) === '.map') {
+                continue;
+            }
+            files.push(fd.name);
+        }
     }
-    const fds = await fse.readdir(dir, {
-        withFileTypes: true
-    });
+  
     const root = {};
-    for (const fd of fds){
-        if (!fd.isFile() || path.extname(fd.name) === '.map') {
-            continue;
-        }
-        const key = path.basename(fd.name, path.extname(fd.name));
-        root[normalizeName(key)] = (await loadFile(path.join(dir, fd.name))).result;
+    for (const name of files) {
+        const key = path.basename(name, path.extname(name));
+        root[normalizeName(key)] = (await loadFile(path.join(dir, name), req)).result;
     }
     return {
         result: root
     };
 };
 // because this is async and its contents are dynamic, we must return it as an array to avoid a property called `then` being interpreted as a Promise
-const loadFile = async (file)=>{
+const loadFile = async (file, req)=>{
     const ext = path.extname(file);
     switch(ext){
         case '.js':
             return {
-                result: strapiUtils.importDefault(file)
+                result: strapiUtils.importDefault(file, req)
             };
         case '.json':
+            if (req) {
+                return {
+                    result: req(`./${file}`)
+                };
+            }
             return {
                 result: await fse.readJSON(file)
             };
diff --git a/node_modules/@strapi/core/dist/loaders/components.js b/node_modules/@strapi/core/dist/loaders/components.js
index 25f81b1..e272545 100644
--- a/node_modules/@strapi/core/dist/loaders/components.js
+++ b/node_modules/@strapi/core/dist/loaders/components.js
@@ -6,16 +6,29 @@ var fse = require('fs-extra');
 var loadFiles = require('../utils/load-files.js');
 
 async function loadComponents(strapi) {
-    if (!await fse.pathExists(strapi.dirs.dist.components)) {
-        return {};
+    let map;
+    let dirName;
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('components', true, /^\.\/[^\/]+\.(js|json)$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "components"', req.id, req.keys());
+        if (req.keys().length === 0) {
+            return {};
+        }
+        map = await loadFiles.loadFiles('components', '*/*.*(js|json)', { req });
+        dirName = '';
+    } else {
+        if (!await fse.pathExists(strapi.dirs.dist.components)) {
+            return {};
+        }
+        map = await loadFiles.loadFiles(strapi.dirs.dist.components, '*/*.*(js|json)');
+        dirName = strapi.dirs.app.components;
     }
-    const map = await loadFiles.loadFiles(strapi.dirs.dist.components, '*/*.*(js|json)');
     const components = Object.keys(map).reduce((acc, category)=>{
         Object.keys(map[category]).forEach((key)=>{
             const schema = map[category][key];
             if (!schema.collectionName) {
                 // NOTE: We're using the filepath from the app directory instead of the dist for information purpose
-                const filePath = path.join(strapi.dirs.app.components, category, schema.__filename__);
+                const filePath = path.join(dirName, category, schema.__filename__);
                 return strapi.stopWithError(`Component ${key} is missing a "collectionName" property.\nVerify file ${filePath}.`);
             }
             const uid = `${category}.${key}`;
@@ -31,6 +44,7 @@ async function loadComponents(strapi) {
         return acc;
     }, {});
     strapi.get('components').add(components);
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: loadComponents', components);
 }
 
 module.exports = loadComponents;
diff --git a/node_modules/@strapi/core/dist/loaders/middlewares.js b/node_modules/@strapi/core/dist/loaders/middlewares.js
index b6c6d55..28e9442 100644
--- a/node_modules/@strapi/core/dist/loaders/middlewares.js
+++ b/node_modules/@strapi/core/dist/loaders/middlewares.js
@@ -12,6 +12,15 @@ async function loadMiddlewares(strapi) {
     strapi.get('middlewares').add(`strapi::`, index.middlewares);
 }
 const loadLocalMiddlewares = async (strapi)=>{
+    const middlewares = {};
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('middlewares', false, /^\.\/.*\.js$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "middlewares"', req.id, req.keys());
+        for (const name of req.keys()) {
+            const key = path.basename(name, '.js');
+            middlewares[key] = strapiUtils.importDefault(name, req);
+        }
+    } else {
     const dir = strapi.dirs.dist.middlewares;
     if (!await fse.pathExists(dir)) {
         return {};
@@ -28,6 +37,8 @@ const loadLocalMiddlewares = async (strapi)=>{
             middlewares[key] = strapiUtils.importDefault(fullPath);
         }
     }
+    }
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: loadLocalMiddlewares', middlewares);
     return middlewares;
 };
 
diff --git a/node_modules/@strapi/core/dist/loaders/plugins/get-enabled-plugins.js b/node_modules/@strapi/core/dist/loaders/plugins/get-enabled-plugins.js
index ca35132..e1af78f 100644
--- a/node_modules/@strapi/core/dist/loaders/plugins/get-enabled-plugins.js
+++ b/node_modules/@strapi/core/dist/loaders/plugins/get-enabled-plugins.js
@@ -42,6 +42,8 @@ const toDetailedDeclaration = (declaration)=>{
             /**
        * we only want the node_module here, not the package.json
        */ pathToPlugin = path.join(declaration.resolve, '..');
+        } else if (typeof __webpack_require__ === 'function') {
+            pathToPlugin = path.dirname(declaration.resolve);
         } else {
             try {
                 pathToPlugin = path.dirname(require.resolve(declaration.resolve));
@@ -60,16 +62,31 @@ const getEnabledPlugins = async (strapi1, { client } = {
     client: false
 })=>{
     const internalPlugins = {};
+    let requirePackageJson;
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('node_modules_strapi_plugin_package', true, /^\.\/(?!.*node_modules).+\/package.json$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "node_modules_strapi_plugin_package"', req.id, req.keys());
+        requirePackageJson = (filePath) => {
+            filePath = filePath.replace('\\','/');
+            if (!filePath.startsWith('./')) {
+                filePath = `./${filePath}`;
+            }
+            return req(filePath);
+        };
+        requirePackageJson.resolve = (filePath) => './' + filePath.replace('\\','/');
+    } else {
+        requirePackageJson = require;
+    }
     for (const dep of INTERNAL_PLUGINS){
         const packagePath = path.join(dep, 'package.json');
         // NOTE: internal plugins should be resolved from the strapi package
-        const packageModulePath = require.resolve(packagePath, {
+        const packageModulePath = requirePackageJson.resolve(packagePath, {
             paths: [
-                require.resolve('@strapi/strapi/package.json'),
+                requirePackageJson.resolve('@strapi/strapi/package.json'),
                 process.cwd()
             ]
         });
-        const packageInfo = require(packageModulePath);
+        const packageInfo = requirePackageJson(packageModulePath);
         validatePluginName(packageInfo.strapi.name);
         internalPlugins[packageInfo.strapi.name] = {
             ...toDetailedDeclaration({
@@ -87,7 +104,7 @@ const getEnabledPlugins = async (strapi1, { client } = {
         const packagePath = path.join(dep, 'package.json');
         let packageInfo;
         try {
-            packageInfo = require(packagePath);
+            packageInfo = requirePackageJson(packagePath);
         } catch  {
             continue;
         }
@@ -107,6 +124,7 @@ const getEnabledPlugins = async (strapi1, { client } = {
             };
         }
     }
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: getEnabledPlugins, installedPlugins from package dependencies', dependencies, installedPlugins);  
     const declaredPlugins = {};
     const userPluginsConfig = await getUserPluginsConfig.getUserPluginsConfig();
     _.forEach(userPluginsConfig, (declaration, pluginName)=>{
@@ -119,7 +137,7 @@ const getEnabledPlugins = async (strapi1, { client } = {
         // for manually resolved plugins
         if (pathToPlugin) {
             const packagePath = path.join(pathToPlugin, 'package.json');
-            const packageInfo = require(packagePath);
+            const packageInfo = requirePackageJson(packagePath);
             if (isStrapiPlugin(packageInfo)) {
                 declaredPlugins[pluginName].info = packageInfo.strapi || {};
                 declaredPlugins[pluginName].packageInfo = packageInfo;
@@ -129,6 +147,7 @@ const getEnabledPlugins = async (strapi1, { client } = {
     const declaredPluginsResolves = fp.map(fp.prop('pathToPlugin'), declaredPlugins);
     const installedPluginsNotAlreadyUsed = fp.pickBy((p)=>!declaredPluginsResolves.includes(p.pathToPlugin), installedPlugins);
     const enabledPlugins = fp.pipe(fp.defaultsDeep(declaredPlugins), fp.defaultsDeep(installedPluginsNotAlreadyUsed), fp.pickBy((p)=>p.enabled))(internalPlugins);
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: getEnabledPlugins', enabledPlugins);
     return enabledPlugins;
 };
 
diff --git a/node_modules/@strapi/core/dist/loaders/plugins/get-user-plugins-config.js b/node_modules/@strapi/core/dist/loaders/plugins/get-user-plugins-config.js
index 889d09f..a39da61 100644
--- a/node_modules/@strapi/core/dist/loaders/plugins/get-user-plugins-config.js
+++ b/node_modules/@strapi/core/dist/loaders/plugins/get-user-plugins-config.js
@@ -10,6 +10,13 @@ var loadConfigFile = require('../../utils/load-config-file.js');
  * first load config from `config/plugins.js`
  * and then merge config from `config/env/{env}/plugins.js`
  */ const getUserPluginsConfig = async ()=>{
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('config', false, /^\.\/plugins\.js$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "config"', req.id, req.keys());
+        const config = loadConfigFile.loadConfigFile('plugins.js', req);
+        process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: getUserPluginsConfig', config);
+        return config;
+    }
     const globalUserConfigPath = path.join(strapi.dirs.dist.config, 'plugins.js');
     const currentEnvUserConfigPath = path.join(strapi.dirs.dist.config, 'env', process.env.NODE_ENV, 'plugins.js');
     let config = {};
@@ -21,6 +28,7 @@ var loadConfigFile = require('../../utils/load-config-file.js');
     if (await fse.pathExists(currentEnvUserConfigPath)) {
         config = fp.merge(config, loadConfigFile.loadConfigFile(currentEnvUserConfigPath));
     }
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: getUserPluginsConfig', config);
     return config;
 };
 
diff --git a/node_modules/@strapi/core/dist/loaders/plugins/index.js b/node_modules/@strapi/core/dist/loaders/plugins/index.js
index c85957f..29381ba 100644
--- a/node_modules/@strapi/core/dist/loaders/plugins/index.js
+++ b/node_modules/@strapi/core/dist/loaders/plugins/index.js
@@ -1,6 +1,9 @@
 'use strict';
 
-var path = require('path');
+let path = require('path');
+if (typeof __webpack_require__ === 'function') {
+  path = path.posix;
+}
 var fse = require('fs-extra');
 var fp = require('lodash/fp');
 var resolve = require('resolve.exports');
@@ -46,12 +49,23 @@ const defaultPlugin = {
     contentTypes: {}
 };
 const applyUserExtension = async (plugins)=>{
-    const extensionsDir = strapi.dirs.dist.extensions;
-    if (!await fse.pathExists(extensionsDir)) {
-        return;
+    let extendedSchemas;
+    let strapiServers;
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context("extensions", true, /.+\/content-types\/.+\/schema\.json$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log("DEBUG: webpack context 'extensions'", req.id, req.keys());
+        const req2 = require.context("extensions", true, /.+\/strapi-server\.js$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log("DEBUG: webpack context 'extensions'", req2.id, req2.keys());
+        extendedSchemas = await loadFiles.loadFiles("", "**/content-types/**/schema.json$", { req });
+        strapiServers = await loadFiles.loadFiles("", "**/strapi-server.js$", { req:req2 });
+    } else {
+        const extensionsDir = strapi.dirs.dist.extensions;
+        if (!await fse.pathExists(extensionsDir)) {
+            return;
+        }
+        extendedSchemas = await loadFiles.loadFiles(extensionsDir, '**/content-types/**/schema.json');
+        strapiServers = await loadFiles.loadFiles(extensionsDir, '**/strapi-server.js');
     }
-    const extendedSchemas = await loadFiles.loadFiles(extensionsDir, '**/content-types/**/schema.json');
-    const strapiServers = await loadFiles.loadFiles(extensionsDir, '**/strapi-server.js');
     for (const pluginName of Object.keys(plugins)){
         const plugin = plugins[pluginName];
         // first: load json schema
@@ -103,6 +117,11 @@ async function loadPlugins(strapi1) {
     const plugins = {};
     const enabledPlugins = await getEnabledPlugins.getEnabledPlugins(strapi1);
     strapi1.config.set('enabledPlugins', enabledPlugins);
+    let req;
+    if (typeof __webpack_require__ === 'function') {
+      req = require.context('node_modules_strapi_plugin_server_js', true, /^\.\/(?!.*node_modules).+\/dist\/server\/[^/]+\.js$/);
+      process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "node_modules_strapi_plugin_server_js"', req.id, req.keys());
+    }
     for (const pluginName of Object.keys(enabledPlugins)){
         const enabledPlugin = enabledPlugins[pluginName];
         let serverEntrypointPath;
@@ -120,10 +139,21 @@ async function loadPlugins(strapi1) {
             throw new Error(`Error loading the plugin ${pluginName} because ${pluginName} is not installed. Please either install the plugin or remove its configuration.`);
         }
         // only load plugins with a server entrypoint
-        if (!await fse.pathExists(serverEntrypointPath)) {
-            continue;
+        let pluginServer;
+        if (typeof __webpack_require__ === 'function') {
+            serverEntrypointPath = "./" + serverEntrypointPath;
+            if (!req.keys().includes(serverEntrypointPath)) {
+                console.error(`plugin ${pluginName} not loaded, did not find ${serverEntrypointPath} (${enabledPlugin.pathToPlugin},${resolvedExport}) in webpack context. export DEBUG_PRINT_WEBPACK_CONTEXT=1 for debuging`)
+                continue;
+            }
+            pluginServer = loadConfigFile.loadConfigFile(serverEntrypointPath, req);
+        } else {
+            // only load plugins with a server entrypoint
+            if (!await fse.pathExists(serverEntrypointPath)) {
+                continue;
+            }
+            pluginServer = loadConfigFile.loadConfigFile(serverEntrypointPath);
         }
-        const pluginServer = loadConfigFile.loadConfigFile(serverEntrypointPath);
         plugins[pluginName] = {
             ...defaultPlugin,
             ...pluginServer,
@@ -138,6 +168,7 @@ async function loadPlugins(strapi1) {
     for (const pluginName of Object.keys(plugins)){
         strapi1.get('plugins').add(pluginName, plugins[pluginName]);
     }
+    process.env.DEBUG_PRINT_STRAPI_MODULES && console.log('DEBUG: modules: loadPlugins', plugins);
 }
 const formatContentTypes = (pluginName, contentTypes)=>{
     Object.values(contentTypes).forEach((definition)=>{
diff --git a/node_modules/@strapi/core/dist/middlewares/favicon.js b/node_modules/@strapi/core/dist/middlewares/favicon.js
index 3ba2f2e..0201d90 100644
--- a/node_modules/@strapi/core/dist/middlewares/favicon.js
+++ b/node_modules/@strapi/core/dist/middlewares/favicon.js
@@ -20,8 +20,17 @@ const favicon = (config, { strapi })=>{
    *
    *  This check ensures backwards compatibility until
    *  the next major version
-   */ if (!fs.existsSync(path.resolve(appRoot, faviconPath))) {
-        faviconPath = 'favicon.ico';
+   */
+    if (typeof __webpack_require__ === "function") {
+        const req = require.context("favicon", false, /favicon\.(ico|png)$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log("DEBUG: webpack context 'favicon'", req.id, req.keys());
+        if (!req.keys().includes(`./${path.basename(faviconPath)}`)){
+            faviconPath = "favicon.ico";
+        }
+    } else {
+        if (!fs.existsSync(path.resolve(appRoot, faviconPath))) {
+            faviconPath = 'favicon.ico';
+        }
     }
     return koaFavicon(path.resolve(appRoot, faviconPath), {
         maxAge
diff --git a/node_modules/@strapi/core/dist/services/server/middleware.js b/node_modules/@strapi/core/dist/services/server/middleware.js
index b0f4e85..3071a93 100644
--- a/node_modules/@strapi/core/dist/services/server/middleware.js
+++ b/node_modules/@strapi/core/dist/services/server/middleware.js
@@ -74,6 +74,16 @@ const dummyMiddleware = (_, next)=>next();
 /**
  * Resolve middleware from package name or path
  */ const resolveCustomMiddleware = (resolve, strapi)=>{
+    if (typeof __webpack_require__ === 'function') {
+        const req = require.context('customMiddlewares', true, /^\.\/.*\.js$/);
+        process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log('DEBUG: webpack context "customMiddlewares"', req.id, req.keys());
+        try {
+            return strapiUtils.importDefault(resolve, req);
+        } catch (err) {
+            console.error(`custom middleware ${resolve} not loaded, did not find it in webpack context. export DEBUG_PRINT_WEBPACK_CONTEXT=1 for debuging`)
+            throw new Error(`Could not load middleware "${resolve}".`);
+        }
+    } else {
     let modulePath;
     try {
         modulePath = require.resolve(resolve);
@@ -89,6 +99,7 @@ const dummyMiddleware = (_, next)=>next();
     } catch (err) {
         throw new Error(`Could not load middleware "${modulePath}".`);
     }
+    }
 };
 
 exports.resolveMiddlewares = resolveMiddlewares;
diff --git a/node_modules/@strapi/core/dist/utils/load-config-file.js b/node_modules/@strapi/core/dist/utils/load-config-file.js
index c1691d9..457b904 100644
--- a/node_modules/@strapi/core/dist/utils/load-config-file.js
+++ b/node_modules/@strapi/core/dist/utils/load-config-file.js
@@ -3,8 +3,47 @@
 var path = require('path');
 var fs = require('fs');
 var strapiUtils = require('@strapi/utils');
-
-const loadJsFile = (file)=>{
+let loadJsFile;
+let loadJSONFile;
+let loadConfigFile;
+if (typeof __webpack_require__ === 'function') {
+    loadJsFile = (file, req) => {
+        try {
+            const jsModule = strapiUtils.importDefault(file, req);
+            if (typeof jsModule === 'function') {
+                return jsModule({ env: strapiUtils.env });
+            }
+            return jsModule;
+        } catch (error) {
+            if (error instanceof Error) {
+                throw new Error(`Could not load js config file ${file} in webpack context with id ${req.id}. export DEBUG_PRINT_WEBPACK_CONTEXT=1 for debuging: ${error.message}`);
+            }
+            throw new Error('Unknown error');
+        }
+    };
+    loadJSONFile = (file, req) => {
+        try {
+            return req(file);
+        } catch (error) {
+            if (error instanceof Error) {
+                throw new Error(`Could not load json config file ${file} in webpack context with id ${req.id}. export DEBUG_PRINT_WEBPACK_CONTEXT=1 for debuging: ${error.message}`);
+            }
+            throw new Error('Unknown error');
+        }
+    };
+    loadConfigFile = (file, req) => {
+        const ext = path.extname(file);
+        switch (ext) {
+            case '.js':
+                return loadJsFile(file, req);
+            case '.json':
+                return loadJSONFile(file, req);
+            default:
+                return {};
+        }
+    };
+} else {
+loadJsFile = (file)=>{
     try {
         const jsModule = strapiUtils.importDefault(file);
         // call if function
@@ -21,7 +60,7 @@ const loadJsFile = (file)=>{
         throw new Error('Unknown error');
     }
 };
-const loadJSONFile = (file)=>{
+loadJSONFile = (file)=>{
     try {
         return JSON.parse(fs.readFileSync(file).toString());
     } catch (error) {
@@ -31,7 +70,7 @@ const loadJSONFile = (file)=>{
         throw new Error('Unknown error');
     }
 };
-const loadConfigFile = (file)=>{
+loadConfigFile = (file)=>{
     const ext = path.extname(file);
     switch(ext){
         case '.js':
@@ -42,6 +81,7 @@ const loadConfigFile = (file)=>{
             return {};
     }
 };
+}
 
 exports.loadConfigFile = loadConfigFile;
 //# sourceMappingURL=load-config-file.js.map
diff --git a/node_modules/@strapi/core/dist/utils/load-files.js b/node_modules/@strapi/core/dist/utils/load-files.js
index 2c64319..b3545d1 100644
--- a/node_modules/@strapi/core/dist/utils/load-files.js
+++ b/node_modules/@strapi/core/dist/utils/load-files.js
@@ -11,21 +11,25 @@ var filepathToPropPath = require('./filepath-to-prop-path.js');
  * Returns an Object build from a list of files matching a glob pattern in a directory
  * It builds a tree structure resembling the folder structure in dir
  */ const loadFiles = async (dir, pattern, // eslint-disable-next-line @typescript-eslint/no-unused-vars
-{ requireFn = strapiUtils.importDefault, shouldUseFileNameAsKey = (_)=>true, globArgs = {} } = {})=>{
+{ requireFn = strapiUtils.importDefault, shouldUseFileNameAsKey = (_)=>true, globArgs = {}, req = null } = {})=>{
     const root = {};
-    const files = await glob.glob(pattern, {
+    const files = req ? req.keys() : await glob.glob(pattern, {
         cwd: dir,
         ...globArgs
     });
     for (const file of files){
-        const absolutePath = path.resolve(dir, file);
+        const absolutePath =  req ? file : path.resolve(dir, file);
         // load module
         delete require.cache[absolutePath];
         let mod;
         if (path.extname(absolutePath) === '.json') {
-            mod = await fse.readJson(absolutePath);
+            if (req) {
+                mod = req(file);
+              } else {
+                mod = await fse.readJson(absolutePath);
+              }
         } else {
-            mod = requireFn(absolutePath);
+            mod = requireFn(absolutePath, req);
         }
         Object.defineProperty(mod, '__filename__', {
             enumerable: true,
diff --git a/node_modules/@strapi/core/dist/utils/update-notifier/index.js b/node_modules/@strapi/core/dist/utils/update-notifier/index.js
index f72c5b1..3c1dd8a 100644
--- a/node_modules/@strapi/core/dist/utils/update-notifier/index.js
+++ b/node_modules/@strapi/core/dist/utils/update-notifier/index.js
@@ -28,6 +28,7 @@ Check out the new releases at: ${releaseLink}
 `.trim();
 };
 const createUpdateNotifier = (strapi)=>{
+  if (typeof __webpack_require__ !== 'function') {
     let config;
     try {
         config = new Configstore(_package.default.name, {}, {
@@ -74,6 +75,7 @@ const createUpdateNotifier = (strapi)=>{
     }
     display(NOTIF_INTERVAL);
     checkUpdate(CHECK_INTERVAL); // doesn't need to await
+  }
 };
 
 exports.createUpdateNotifier = createUpdateNotifier;
